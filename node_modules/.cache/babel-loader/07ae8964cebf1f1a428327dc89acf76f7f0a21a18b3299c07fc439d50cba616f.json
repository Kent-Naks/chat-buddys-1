{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/ChatConversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport './ChatConversation.css'; // Importing the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GPT_API_URL = 'https://api.openai.com/v1/chat/completions'; // OpenAI API URL\n\nfunction ChatConversation() {\n  _s();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  useEffect(() => {\n    const initialMessage = `Hello! Let's talk about ${topic}. Feel free to ask me anything related to ${topic}.`;\n    setMessages([{\n      text: initialMessage\n    }]);\n  }, [topic]);\n  const generateResponse = async userMessage => {\n    try {\n      setIsTyping(true);\n      const response = await axios.post(GPT_API_URL, {\n        model: \"gpt-4\",\n        // Ensure you're using the correct model\n        messages: [{\n          role: \"user\",\n          content: userMessage\n        }]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = response.data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        text: aiResponse\n      }]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Sorry, I couldn't generate a response right now.\"\n      }]);\n      setIsTyping(false);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() === '') {\n      return;\n    }\n    const userMessage = {\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n    generateResponse(input);\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-conversation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Conversation on \", topic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message typing\",\n        children: \"AI is typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatConversation, \"SYxHYybLnCae2DXkIJzzKnei3KY=\", false, function () {\n  return [useLocation];\n});\n_c = ChatConversation;\nexport default ChatConversation;\nvar _c;\n$RefreshReg$(_c, \"ChatConversation\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","jsxDEV","_jsxDEV","GPT_API_URL","ChatConversation","_s","location","queryParams","URLSearchParams","search","topic","get","messages","setMessages","input","setInput","isTyping","setIsTyping","initialMessage","text","generateResponse","userMessage","response","post","model","role","content","headers","process","env","REACT_APP_OPENAI_API_KEY","aiResponse","data","choices","message","prevMessages","error","console","handleSubmit","e","preventDefault","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/chemelil/chat-buddys-1/src/ChatConversation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport './ChatConversation.css';  // Importing the CSS file\n\nconst GPT_API_URL = 'https://api.openai.com/v1/chat/completions'; // OpenAI API URL\n\nfunction ChatConversation() {\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  useEffect(() => {\n    const initialMessage = `Hello! Let's talk about ${topic}. Feel free to ask me anything related to ${topic}.`;\n    setMessages([{ text: initialMessage }]);\n  }, [topic]);\n\n  const generateResponse = async (userMessage) => {\n    try {\n      setIsTyping(true);\n\n      const response = await axios.post(\n        GPT_API_URL,\n        {\n          model: \"gpt-4\", // Ensure you're using the correct model\n          messages: [\n            { role: \"user\", content: userMessage }\n          ]\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const aiResponse = response.data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, { text: aiResponse }]);\n      setIsTyping(false);\n\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      setMessages(prevMessages => [...prevMessages, { text: \"Sorry, I couldn't generate a response right now.\" }]);\n      setIsTyping(false);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (input.trim() === '') {\n      return;\n    }\n\n    const userMessage = { text: input };\n    setMessages([...messages, userMessage]);\n\n    generateResponse(input);\n    setInput('');\n  };\n\n  return (\n    <div className=\"chat-conversation\">\n      <h1>Conversation on {topic}</h1>\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <p key={index} className=\"message\">{msg.text}</p>\n        ))}\n        {isTyping && <p className=\"message typing\">AI is typing...</p>}\n      </div>\n      <form onSubmit={handleSubmit} className=\"input-form\">\n        <input \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Type a message...\" \n          className=\"input-field\"\n        />\n        <button type=\"submit\" className=\"send-button\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatConversation;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,wBAAwB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAG,4CAA4C,CAAC,CAAC;;AAElE,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,KAAK,GAAGH,WAAW,CAACI,GAAG,CAAC,OAAO,CAAC;EAEtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd,MAAMoB,cAAc,GAAG,2BAA2BR,KAAK,6CAA6CA,KAAK,GAAG;IAC5GG,WAAW,CAAC,CAAC;MAAEM,IAAI,EAAED;IAAe,CAAC,CAAC,CAAC;EACzC,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;EAEX,MAAMU,gBAAgB,GAAG,MAAOC,WAAW,IAAK;IAC9C,IAAI;MACFJ,WAAW,CAAC,IAAI,CAAC;MAEjB,MAAMK,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAC/BpB,WAAW,EACX;QACEqB,KAAK,EAAE,OAAO;QAAE;QAChBZ,QAAQ,EAAE,CACR;UAAEa,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEL;QAAY,CAAC;MAE1C,CAAC,EACD;QACEM,OAAO,EAAE;UACP,eAAe,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;UACjE,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMC,UAAU,GAAGT,QAAQ,CAACU,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACR,OAAO;MAC3Db,WAAW,CAACsB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEhB,IAAI,EAAEY;MAAW,CAAC,CAAC,CAAC;MACpEd,WAAW,CAAC,KAAK,CAAC;IAEpB,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDvB,WAAW,CAACsB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEhB,IAAI,EAAE;MAAmD,CAAC,CAAC,CAAC;MAC5GF,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMqB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI1B,KAAK,CAAC2B,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACvB;IACF;IAEA,MAAMpB,WAAW,GAAG;MAAEF,IAAI,EAAEL;IAAM,CAAC;IACnCD,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAES,WAAW,CAAC,CAAC;IAEvCD,gBAAgB,CAACN,KAAK,CAAC;IACvBC,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACEb,OAAA;IAAKwC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCzC,OAAA;MAAAyC,QAAA,GAAI,kBAAgB,EAACjC,KAAK;IAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChC7C,OAAA;MAAKwC,SAAS,EAAC,UAAU;MAAAC,QAAA,GACtB/B,QAAQ,CAACoC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBhD,OAAA;QAAewC,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAEM,GAAG,CAAC9B;MAAI,GAApC+B,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmC,CACjD,CAAC,EACD/B,QAAQ,iBAAId,OAAA;QAAGwC,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eACN7C,OAAA;MAAMiD,QAAQ,EAAEb,YAAa;MAACI,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAClDzC,OAAA;QACEkD,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEvC,KAAM;QACbwC,QAAQ,EAAGf,CAAC,IAAKxB,QAAQ,CAACwB,CAAC,CAACgB,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC,mBAAmB;QAC/Bd,SAAS,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACF7C,OAAA;QAAQkD,IAAI,EAAC,QAAQ;QAACV,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC1C,EAAA,CAhFQD,gBAAgB;EAAA,QACNJ,WAAW;AAAA;AAAAyD,EAAA,GADrBrD,gBAAgB;AAkFzB,eAAeA,gBAAgB;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}