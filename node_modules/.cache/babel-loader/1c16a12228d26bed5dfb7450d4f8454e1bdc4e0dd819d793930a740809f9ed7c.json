{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this));\nconst generateResponse = async userMessage => {\n  try {\n    setIsTyping(true);\n    const response = await axios.post(GPT_API_URL, {\n      model: \"gpt-4\",\n      // Ensure you're using the correct model\n      messages: [{\n        role: \"user\",\n        content: userMessage\n      }]\n    }, {\n      headers: {\n        'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.data.choices && response.data.choices.length > 0) {\n      const aiResponse = response.data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        text: aiResponse\n      }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"No response from AI.\"\n      }]);\n    }\n  } catch (error) {\n    console.error('Error fetching AI response:', error);\n    setMessages(prevMessages => [...prevMessages, {\n      text: `Error: ${error.message}`\n    }]);\n  } finally {\n    setIsTyping(false);\n  }\n};","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","generateResponse","userMessage","setIsTyping","response","axios","post","GPT_API_URL","model","messages","role","content","headers","process","env","REACT_APP_OPENAI_API_KEY","data","choices","length","aiResponse","message","setMessages","prevMessages","text","error","console"],"sources":["/home/chemelil/chat-buddys-1/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\nconst generateResponse = async (userMessage) => {\n  try {\n    setIsTyping(true);\n\n    const response = await axios.post(\n      GPT_API_URL,\n      {\n        model: \"gpt-4\", // Ensure you're using the correct model\n        messages: [\n          { role: \"user\", content: userMessage }\n        ]\n      },\n      {\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    if (response.data.choices && response.data.choices.length > 0) {\n      const aiResponse = response.data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, { text: aiResponse }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, { text: \"No response from AI.\" }]);\n    }\n\n  } catch (error) {\n    console.error('Error fetching AI response:', error);\n    setMessages(prevMessages => [...prevMessages, { text: `Error: ${error.message}` }]);\n  } finally {\n    setIsTyping(false);\n  }\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTL,OAAA,CAACJ,KAAK,CAACU,UAAU;EAAAC,QAAA,eACfP,OAAA,CAACF,GAAG;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;AACD,MAAMC,gBAAgB,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACFC,WAAW,CAAC,IAAI,CAAC;IAEjB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAC/BC,WAAW,EACX;MACEC,KAAK,EAAE,OAAO;MAAE;MAChBC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAET;MAAY,CAAC;IAE1C,CAAC,EACD;MACEU,OAAO,EAAE;QACP,eAAe,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;QACjE,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IAED,IAAIX,QAAQ,CAACY,IAAI,CAACC,OAAO,IAAIb,QAAQ,CAACY,IAAI,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7D,MAAMC,UAAU,GAAGf,QAAQ,CAACY,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACG,OAAO,CAACT,OAAO;MAC3DU,WAAW,CAACC,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAEJ;MAAW,CAAC,CAAC,CAAC;IACtE,CAAC,MAAM;MACLE,WAAW,CAACC,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAE;MAAuB,CAAC,CAAC,CAAC;IAClF;EAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnDH,WAAW,CAACC,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;MAAEC,IAAI,EAAE,UAAUC,KAAK,CAACJ,OAAO;IAAG,CAAC,CAAC,CAAC;EACrF,CAAC,SAAS;IACRjB,WAAW,CAAC,KAAK,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}