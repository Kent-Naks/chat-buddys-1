{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/ChatConversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './ChatConversation.css'; // Importing the CSS file\n\n// Example responses for different topics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  political: [{\n    trigger: 'policy changes',\n    response: \"Interesting perspective! What do you think about the recent policy changes?\"\n  }, {\n    trigger: 'government leadership',\n    response: \"I see where you're coming from. How do you feel about the current government leadership?\"\n  }, {\n    trigger: 'elections',\n    response: \"Good point! Do you think these issues will impact future elections?\"\n  }\n  // Add more tailored responses\n  ],\n  emotional: [{\n    trigger: 'feeling overwhelmed',\n    response: \"It sounds like you're going through a lot. Do you have any strategies to manage these feelings?\"\n  }, {\n    trigger: 'coping with emotions',\n    response: \"Thanks for opening up. How do you cope with challenging emotions in your daily life?\"\n  }, {\n    trigger: 'support',\n    response: \"I appreciate your honesty. What kind of support do you find most helpful during tough times?\"\n  }\n  // Add more tailored responses\n  ],\n  scientific: [{\n    trigger: 'recent discoveries',\n    response: \"Interesting! How do you think these discoveries will affect everyday life?\"\n  }, {\n    trigger: 'scientific breakthroughs',\n    response: \"Great observation. Are there any recent scientific breakthroughs that you think are especially exciting?\"\n  }, {\n    trigger: 'space exploration',\n    response: \"What do you think about the current state of space exploration?\"\n  }\n  // Add more tailored responses\n  ]\n};\nfunction ChatConversation() {\n  _s();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    // Initialize conversation\n    if (responses[topic]) {\n      const initialMessage = `Let's talk about ${topic}.`;\n      setMessages([{\n        text: initialMessage\n      }]);\n    }\n  }, [topic]);\n  const generateResponse = userMessage => {\n    if (responses[topic]) {\n      // Simple keyword matching for more relevant responses\n      for (const response of responses[topic]) {\n        if (userMessage.toLowerCase().includes(response.trigger)) {\n          return response.response;\n        }\n      }\n      // Default response if no keyword matches\n      return \"That's an interesting point. What more can you share?\";\n    }\n    return \"I'm not sure how to respond to that.\";\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() === '') {\n      // Do not process empty input\n      return;\n    }\n\n    // Add user's message\n    const userMessage = {\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n\n    // Generate a response based on the topic\n    const nextResponse = generateResponse(input);\n    setMessages(prevMessages => [...prevMessages, {\n      text: nextResponse\n    }]);\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Conversation on \", topic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatConversation, \"bItjSbRKDnEpHg+f20FXFZ8j+D0=\", false, function () {\n  return [useLocation];\n});\n_c = ChatConversation;\nexport default ChatConversation;\nvar _c;\n$RefreshReg$(_c, \"ChatConversation\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","responses","political","trigger","response","emotional","scientific","ChatConversation","_s","location","queryParams","URLSearchParams","search","topic","get","messages","setMessages","input","setInput","initialMessage","text","generateResponse","userMessage","toLowerCase","includes","handleSubmit","e","preventDefault","trim","nextResponse","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/chemelil/chat-buddys-1/src/ChatConversation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './ChatConversation.css';  // Importing the CSS file\n\n// Example responses for different topics\nconst responses = {\n  political: [\n    { trigger: 'policy changes', response: \"Interesting perspective! What do you think about the recent policy changes?\" },\n    { trigger: 'government leadership', response: \"I see where you're coming from. How do you feel about the current government leadership?\" },\n    { trigger: 'elections', response: \"Good point! Do you think these issues will impact future elections?\" },\n    // Add more tailored responses\n  ],\n  emotional: [\n    { trigger: 'feeling overwhelmed', response: \"It sounds like you're going through a lot. Do you have any strategies to manage these feelings?\" },\n    { trigger: 'coping with emotions', response: \"Thanks for opening up. How do you cope with challenging emotions in your daily life?\" },\n    { trigger: 'support', response: \"I appreciate your honesty. What kind of support do you find most helpful during tough times?\" },\n    // Add more tailored responses\n  ],\n  scientific: [\n    { trigger: 'recent discoveries', response: \"Interesting! How do you think these discoveries will affect everyday life?\" },\n    { trigger: 'scientific breakthroughs', response: \"Great observation. Are there any recent scientific breakthroughs that you think are especially exciting?\" },\n    { trigger: 'space exploration', response: \"What do you think about the current state of space exploration?\" },\n    // Add more tailored responses\n  ]\n};\n\nfunction ChatConversation() {\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    // Initialize conversation\n    if (responses[topic]) {\n      const initialMessage = `Let's talk about ${topic}.`;\n      setMessages([{ text: initialMessage }]);\n    }\n  }, [topic]);\n\n  const generateResponse = (userMessage) => {\n    if (responses[topic]) {\n      // Simple keyword matching for more relevant responses\n      for (const response of responses[topic]) {\n        if (userMessage.toLowerCase().includes(response.trigger)) {\n          return response.response;\n        }\n      }\n      // Default response if no keyword matches\n      return \"That's an interesting point. What more can you share?\";\n    }\n    return \"I'm not sure how to respond to that.\";\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (input.trim() === '') {\n      // Do not process empty input\n      return;\n    }\n\n    // Add user's message\n    const userMessage = { text: input };\n    setMessages([...messages, userMessage]);\n\n    // Generate a response based on the topic\n    const nextResponse = generateResponse(input);\n    setMessages(prevMessages => [...prevMessages, { text: nextResponse }]);\n\n    setInput('');\n  };\n\n  return (\n    <div>\n      <h1>Conversation on {topic}</h1>\n      <div>\n        {messages.map((msg, index) => (\n          <p key={index}>{msg.text}</p>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Type a message...\" \n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatConversation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}