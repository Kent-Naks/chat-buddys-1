{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/ChatConversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './ChatConversation.css'; // Importing the CSS file\n\n// Pre-defined responses based on topics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  political: [\"Hey! What are your thoughts on the current political climate?\", \"Have you been following any recent political events?\", \"What political issues do you think are most important right now?\"],\n  emotional: [\"Hi! How are you feeling today?\", \"Is there something specific that's been on your mind lately?\", \"What do you do to manage stress or tough emotions?\"],\n  scientific: [\"Hello! Are you excited about any recent scientific discoveries?\", \"Which area of science interests you the most?\", \"Have you heard about any new scientific breakthroughs recently?\"]\n};\nfunction ChatConversation() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [questionIndex, setQuestionIndex] = useState(0);\n  useEffect(() => {\n    fetch(`http://localhost:3000/conversations/${id}?topic=${topic}`).then(response => response.json()).then(data => setMessages(data));\n\n    // Initial greeting message\n    if (responses[topic]) {\n      setMessages([{\n        text: responses[topic][0]\n      }]);\n      setQuestionIndex(1);\n    }\n  }, [id, topic]);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Add user's message\n    const newMessage = {\n      text: input\n    };\n    setMessages([...messages, newMessage]);\n\n    // Generate a response based on the conversation topic\n    if (responses[topic] && questionIndex < responses[topic].length) {\n      setMessages(prevMessages => [...prevMessages, {\n        text: responses[topic][questionIndex]\n      }]);\n      setQuestionIndex(questionIndex + 1);\n    }\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Conversation on \", topic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatConversation, \"MQMuA3YNJfMARnkUMYMlGjKWs2k=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChatConversation;\nexport default ChatConversation;\nvar _c;\n$RefreshReg$(_c, \"ChatConversation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","jsxDEV","_jsxDEV","responses","political","emotional","scientific","ChatConversation","_s","id","location","queryParams","URLSearchParams","search","topic","get","messages","setMessages","input","setInput","questionIndex","setQuestionIndex","fetch","then","response","json","data","text","handleSubmit","e","preventDefault","newMessage","length","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/chemelil/chat-buddys-1/src/ChatConversation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './ChatConversation.css';  // Importing the CSS file\n\n// Pre-defined responses based on topics\nconst responses = {\n  political: [\n    \"Hey! What are your thoughts on the current political climate?\",\n    \"Have you been following any recent political events?\",\n    \"What political issues do you think are most important right now?\"\n  ],\n  emotional: [\n    \"Hi! How are you feeling today?\",\n    \"Is there something specific that's been on your mind lately?\",\n    \"What do you do to manage stress or tough emotions?\"\n  ],\n  scientific: [\n    \"Hello! Are you excited about any recent scientific discoveries?\",\n    \"Which area of science interests you the most?\",\n    \"Have you heard about any new scientific breakthroughs recently?\"\n  ]\n};\n\nfunction ChatConversation() {\n  const { id } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  \n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [questionIndex, setQuestionIndex] = useState(0);\n\n  useEffect(() => {\n    fetch(`http://localhost:3000/conversations/${id}?topic=${topic}`)\n      .then(response => response.json())\n      .then(data => setMessages(data));\n\n    // Initial greeting message\n    if (responses[topic]) {\n      setMessages([{ text: responses[topic][0] }]);\n      setQuestionIndex(1);\n    }\n  }, [id, topic]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Add user's message\n    const newMessage = { text: input };\n    setMessages([...messages, newMessage]);\n\n    // Generate a response based on the conversation topic\n    if (responses[topic] && questionIndex < responses[topic].length) {\n      setMessages(prevMessages => [...prevMessages, { text: responses[topic][questionIndex] }]);\n      setQuestionIndex(questionIndex + 1);\n    }\n\n    setInput('');\n  };\n\n  return (\n    <div>\n      <h1>Conversation on {topic}</h1>\n      <div>\n        {messages.map((msg, index) => (\n          <p key={index}>{msg.text}</p>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Type a message...\" \n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatConversation;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAO,wBAAwB,CAAC,CAAE;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG;EAChBC,SAAS,EAAE,CACT,+DAA+D,EAC/D,sDAAsD,EACtD,kEAAkE,CACnE;EACDC,SAAS,EAAE,CACT,gCAAgC,EAChC,8DAA8D,EAC9D,oDAAoD,CACrD;EACDC,UAAU,EAAE,CACV,iEAAiE,EACjE,+CAA+C,EAC/C,iEAAiE;AAErE,CAAC;AAED,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC1B,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,KAAK,GAAGH,WAAW,CAACI,GAAG,CAAC,OAAO,CAAC;EAEtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EAErDC,SAAS,CAAC,MAAM;IACdwB,KAAK,CAAC,uCAAuCb,EAAE,UAAUK,KAAK,EAAE,CAAC,CAC9DS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIT,WAAW,CAACS,IAAI,CAAC,CAAC;;IAElC;IACA,IAAIvB,SAAS,CAACW,KAAK,CAAC,EAAE;MACpBG,WAAW,CAAC,CAAC;QAAEU,IAAI,EAAExB,SAAS,CAACW,KAAK,CAAC,CAAC,CAAC;MAAE,CAAC,CAAC,CAAC;MAC5CO,gBAAgB,CAAC,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAACZ,EAAE,EAAEK,KAAK,CAAC,CAAC;EAEf,MAAMc,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,MAAMC,UAAU,GAAG;MAAEJ,IAAI,EAAET;IAAM,CAAC;IAClCD,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEe,UAAU,CAAC,CAAC;;IAEtC;IACA,IAAI5B,SAAS,CAACW,KAAK,CAAC,IAAIM,aAAa,GAAGjB,SAAS,CAACW,KAAK,CAAC,CAACkB,MAAM,EAAE;MAC/Df,WAAW,CAACgB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEN,IAAI,EAAExB,SAAS,CAACW,KAAK,CAAC,CAACM,aAAa;MAAE,CAAC,CAAC,CAAC;MACzFC,gBAAgB,CAACD,aAAa,GAAG,CAAC,CAAC;IACrC;IAEAD,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACEjB,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,GAAI,kBAAgB,EAACpB,KAAK;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChCpC,OAAA;MAAAgC,QAAA,EACGlB,QAAQ,CAACuB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBvC,OAAA;QAAAgC,QAAA,EAAgBM,GAAG,CAACb;MAAI,GAAhBc,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNpC,OAAA;MAAMwC,QAAQ,EAAEd,YAAa;MAAAM,QAAA,gBAC3BhC,OAAA;QACEyC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE1B,KAAM;QACb2B,QAAQ,EAAGhB,CAAC,IAAKV,QAAQ,CAACU,CAAC,CAACiB,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC;MAAmB;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACFpC,OAAA;QAAQyC,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC9B,EAAA,CAzDQD,gBAAgB;EAAA,QACRR,SAAS,EACPC,WAAW;AAAA;AAAAgD,EAAA,GAFrBzC,gBAAgB;AA2DzB,eAAeA,gBAAgB;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}