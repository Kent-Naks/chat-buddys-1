{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/ChatConversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './ChatConversation.css'; // Importing the CSS file\n\n// Example responses for different topics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  political: [{\n    trigger: 'policy changes',\n    response: \"Interesting perspective! What do you think about the recent policy changes?\"\n  }, {\n    trigger: 'government leadership',\n    response: \"I see where you're coming from. How do you feel about the current government leadership?\"\n  }, {\n    trigger: 'elections',\n    response: \"Good point! Do you think these issues will impact future elections?\"\n  }\n  // Add more tailored responses\n  ],\n  emotional: [{\n    trigger: 'feeling overwhelmed',\n    response: \"It sounds like you're going through a lot. Do you have any strategies to manage these feelings?\"\n  }, {\n    trigger: 'coping with emotions',\n    response: \"Thanks for opening up. How do you cope with challenging emotions in your daily life?\"\n  }, {\n    trigger: 'support',\n    response: \"I appreciate your honesty. What kind of support do you find most helpful during tough times?\"\n  }\n  // Add more tailored responses\n  ],\n  scientific: [{\n    trigger: 'recent discoveries',\n    response: \"Interesting! How do you think these discoveries will affect everyday life?\"\n  }, {\n    trigger: 'scientific breakthroughs',\n    response: \"Great observation. Are there any recent scientific breakthroughs that you think are especially exciting?\"\n  }, {\n    trigger: 'space exploration',\n    response: \"What do you think about the current state of space exploration?\"\n  }\n  // Add more tailored responses\n  ]\n};\n\n// Example \"Did you know?\" facts for each topic\nconst didYouKnowFacts = {\n  political: [\"Did you know that the first political party in the world was the Whig Party in the UK?\", \"Did you know that in ancient Athens, political leaders were selected by a form of lottery?\"\n  // Add more facts\n  ],\n  emotional: [\"Did you know that expressing gratitude can improve your emotional well-being?\", \"Did you know that physical exercise can help regulate emotions and reduce anxiety?\"\n  // Add more facts\n  ],\n  scientific: [\"Did you know that light from the Sun takes approximately 8 minutes and 20 seconds to reach Earth?\", \"Did you know that honey never spoils? Archaeologists have found pots of honey in ancient Egyptian tombs that are over 3,000 years old and still edible!\"\n  // Add more facts\n  ]\n};\nfunction ChatConversation() {\n  _s();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    // Initialize conversation with a topic-related message\n    if (responses[topic]) {\n      const initialMessage = `Let's talk about ${topic}.`;\n      const fact = getDidYouKnowFact(topic);\n      setMessages([{\n        text: initialMessage\n      }, {\n        text: fact\n      }]);\n    }\n  }, [topic]);\n  const getDidYouKnowFact = topic => {\n    const facts = didYouKnowFacts[topic];\n    if (facts) {\n      const randomIndex = Math.floor(Math.random() * facts.length);\n      return facts[randomIndex];\n    }\n    return '';\n  };\n  const generateResponse = userMessage => {\n    if (responses[topic]) {\n      // Simple keyword matching for more relevant responses\n      for (const response of responses[topic]) {\n        if (userMessage.toLowerCase().includes(response.trigger)) {\n          return response.response;\n        }\n      }\n      // Default response if no keyword matches\n      return \"That's an interesting point. What more can you share?\";\n    }\n    return \"I'm not sure how to respond to that.\";\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() === '') {\n      // Do not process empty input\n      return;\n    }\n\n    // Add user's message\n    const userMessage = {\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n\n    // Generate a response based on the topic\n    const nextResponse = generateResponse(input);\n    setMessages(prevMessages => [...prevMessages, {\n      text: nextResponse\n    }]);\n\n    // Add another \"Did you know?\" fact after each user message\n    const fact = getDidYouKnowFact(topic);\n    setMessages(prevMessages => [...prevMessages, {\n      text: fact\n    }]);\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Conversation on \", topic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatConversation, \"bItjSbRKDnEpHg+f20FXFZ8j+D0=\", false, function () {\n  return [useLocation];\n});\n_c = ChatConversation;\nexport default ChatConversation;\nvar _c;\n$RefreshReg$(_c, \"ChatConversation\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","responses","political","trigger","response","emotional","scientific","didYouKnowFacts","ChatConversation","_s","location","queryParams","URLSearchParams","search","topic","get","messages","setMessages","input","setInput","initialMessage","fact","getDidYouKnowFact","text","facts","randomIndex","Math","floor","random","length","generateResponse","userMessage","toLowerCase","includes","handleSubmit","e","preventDefault","trim","nextResponse","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/chemelil/chat-buddys-1/src/ChatConversation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './ChatConversation.css';  // Importing the CSS file\n\n// Example responses for different topics\nconst responses = {\n  political: [\n    { trigger: 'policy changes', response: \"Interesting perspective! What do you think about the recent policy changes?\" },\n    { trigger: 'government leadership', response: \"I see where you're coming from. How do you feel about the current government leadership?\" },\n    { trigger: 'elections', response: \"Good point! Do you think these issues will impact future elections?\" },\n    // Add more tailored responses\n  ],\n  emotional: [\n    { trigger: 'feeling overwhelmed', response: \"It sounds like you're going through a lot. Do you have any strategies to manage these feelings?\" },\n    { trigger: 'coping with emotions', response: \"Thanks for opening up. How do you cope with challenging emotions in your daily life?\" },\n    { trigger: 'support', response: \"I appreciate your honesty. What kind of support do you find most helpful during tough times?\" },\n    // Add more tailored responses\n  ],\n  scientific: [\n    { trigger: 'recent discoveries', response: \"Interesting! How do you think these discoveries will affect everyday life?\" },\n    { trigger: 'scientific breakthroughs', response: \"Great observation. Are there any recent scientific breakthroughs that you think are especially exciting?\" },\n    { trigger: 'space exploration', response: \"What do you think about the current state of space exploration?\" },\n    // Add more tailored responses\n  ]\n};\n\n// Example \"Did you know?\" facts for each topic\nconst didYouKnowFacts = {\n  political: [\n    \"Did you know that the first political party in the world was the Whig Party in the UK?\",\n    \"Did you know that in ancient Athens, political leaders were selected by a form of lottery?\",\n    // Add more facts\n  ],\n  emotional: [\n    \"Did you know that expressing gratitude can improve your emotional well-being?\",\n    \"Did you know that physical exercise can help regulate emotions and reduce anxiety?\",\n    // Add more facts\n  ],\n  scientific: [\n    \"Did you know that light from the Sun takes approximately 8 minutes and 20 seconds to reach Earth?\",\n    \"Did you know that honey never spoils? Archaeologists have found pots of honey in ancient Egyptian tombs that are over 3,000 years old and still edible!\",\n    // Add more facts\n  ]\n};\n\nfunction ChatConversation() {\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    // Initialize conversation with a topic-related message\n    if (responses[topic]) {\n      const initialMessage = `Let's talk about ${topic}.`;\n      const fact = getDidYouKnowFact(topic);\n      setMessages([{ text: initialMessage }, { text: fact }]);\n    }\n  }, [topic]);\n\n  const getDidYouKnowFact = (topic) => {\n    const facts = didYouKnowFacts[topic];\n    if (facts) {\n      const randomIndex = Math.floor(Math.random() * facts.length);\n      return facts[randomIndex];\n    }\n    return '';\n  };\n\n  const generateResponse = (userMessage) => {\n    if (responses[topic]) {\n      // Simple keyword matching for more relevant responses\n      for (const response of responses[topic]) {\n        if (userMessage.toLowerCase().includes(response.trigger)) {\n          return response.response;\n        }\n      }\n      // Default response if no keyword matches\n      return \"That's an interesting point. What more can you share?\";\n    }\n    return \"I'm not sure how to respond to that.\";\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (input.trim() === '') {\n      // Do not process empty input\n      return;\n    }\n\n    // Add user's message\n    const userMessage = { text: input };\n    setMessages([...messages, userMessage]);\n\n    // Generate a response based on the topic\n    const nextResponse = generateResponse(input);\n    setMessages(prevMessages => [...prevMessages, { text: nextResponse }]);\n\n    // Add another \"Did you know?\" fact after each user message\n    const fact = getDidYouKnowFact(topic);\n    setMessages(prevMessages => [...prevMessages, { text: fact }]);\n\n    setInput('');\n  };\n\n  return (\n    <div>\n      <h1>Conversation on {topic}</h1>\n      <div>\n        {messages.map((msg, index) => (\n          <p key={index}>{msg.text}</p>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Type a message...\" \n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatConversation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}