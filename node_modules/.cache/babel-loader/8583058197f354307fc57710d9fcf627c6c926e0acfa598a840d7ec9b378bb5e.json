{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/ChatConversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './ChatConversation.css'; // Importing the CSS file\n\n// Response templates for different topics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  political: [\"Interesting perspective! What do you think about the recent policy changes?\", \"I see where you're coming from. How do you feel about the current government leadership?\", \"Good point! Do you think these issues will impact future elections?\", \"That's a valid concern. What do you think are the long-term effects of this political trend?\"],\n  emotional: [\"I'm glad you shared that. What usually helps you feel better when you're down?\", \"It sounds like you're going through a lot. Do you have any strategies to manage these feelings?\", \"Thanks for opening up. How do you cope with challenging emotions in your daily life?\", \"I appreciate your honesty. What kind of support do you find most helpful during tough times?\"],\n  scientific: [\"That's fascinating! Are there any specific scientific fields that particularly intrigue you?\", \"Interesting! How do you think these discoveries will affect everyday life?\", \"Great observation. Are there any recent scientific breakthroughs that you think are especially exciting?\", \"I agree! How do you stay updated with the latest developments in science?\"]\n};\nfunction ChatConversation() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [responseIndex, setResponseIndex] = useState(0);\n  useEffect(() => {\n    // Initialize conversation with id and topic\n    if (responses[topic]) {\n      const initialMessage = `Conversation started for topic: ${topic}`;\n      setMessages([{\n        text: initialMessage\n      }]);\n      setResponseIndex(0);\n\n      // Example of using the id to fetch additional data if needed\n      // fetch(`http://localhost:3000/conversations/${id}?topic=${topic}`)\n      //   .then(response => response.json())\n      //   .then(data => setMessages([...messages, ...data]))\n      //   .catch(error => console.error('Error fetching data:', error));\n    }\n  }, [id, topic]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() === '') {\n      // Do not process empty input\n      return;\n    }\n\n    // Add user's message\n    const userMessage = {\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n\n    // Generate a response based on the topic\n    if (responses[topic] && responseIndex < responses[topic].length) {\n      const nextResponse = responses[topic][responseIndex];\n      setMessages(prevMessages => [...prevMessages, {\n        text: nextResponse\n      }]);\n      setResponseIndex(responseIndex + 1);\n    }\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Conversation on \", topic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatConversation, \"y6w8Oa8TatjzMCvGnLpu9GuH3LI=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChatConversation;\nexport default ChatConversation;\nvar _c;\n$RefreshReg$(_c, \"ChatConversation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","jsxDEV","_jsxDEV","responses","political","emotional","scientific","ChatConversation","_s","id","location","queryParams","URLSearchParams","search","topic","get","messages","setMessages","input","setInput","responseIndex","setResponseIndex","initialMessage","text","handleSubmit","e","preventDefault","trim","userMessage","length","nextResponse","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/chemelil/chat-buddys-1/src/ChatConversation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './ChatConversation.css';  // Importing the CSS file\n\n// Response templates for different topics\nconst responses = {\n  political: [\n    \"Interesting perspective! What do you think about the recent policy changes?\",\n    \"I see where you're coming from. How do you feel about the current government leadership?\",\n    \"Good point! Do you think these issues will impact future elections?\",\n    \"That's a valid concern. What do you think are the long-term effects of this political trend?\"\n  ],\n  emotional: [\n    \"I'm glad you shared that. What usually helps you feel better when you're down?\",\n    \"It sounds like you're going through a lot. Do you have any strategies to manage these feelings?\",\n    \"Thanks for opening up. How do you cope with challenging emotions in your daily life?\",\n    \"I appreciate your honesty. What kind of support do you find most helpful during tough times?\"\n  ],\n  scientific: [\n    \"That's fascinating! Are there any specific scientific fields that particularly intrigue you?\",\n    \"Interesting! How do you think these discoveries will affect everyday life?\",\n    \"Great observation. Are there any recent scientific breakthroughs that you think are especially exciting?\",\n    \"I agree! How do you stay updated with the latest developments in science?\"\n  ]\n};\n\nfunction ChatConversation() {\n  const { id } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  \n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [responseIndex, setResponseIndex] = useState(0);\n\n  useEffect(() => {\n    // Initialize conversation with id and topic\n    if (responses[topic]) {\n      const initialMessage = `Conversation started for topic: ${topic}`;\n      setMessages([{ text: initialMessage }]);\n      setResponseIndex(0);\n\n      // Example of using the id to fetch additional data if needed\n      // fetch(`http://localhost:3000/conversations/${id}?topic=${topic}`)\n      //   .then(response => response.json())\n      //   .then(data => setMessages([...messages, ...data]))\n      //   .catch(error => console.error('Error fetching data:', error));\n    }\n  }, [id, topic]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (input.trim() === '') {\n      // Do not process empty input\n      return;\n    }\n\n    // Add user's message\n    const userMessage = { text: input };\n    setMessages([...messages, userMessage]);\n\n    // Generate a response based on the topic\n    if (responses[topic] && responseIndex < responses[topic].length) {\n      const nextResponse = responses[topic][responseIndex];\n      setMessages(prevMessages => [...prevMessages, { text: nextResponse }]);\n      setResponseIndex(responseIndex + 1);\n    }\n\n    setInput('');\n  };\n\n  return (\n    <div>\n      <h1>Conversation on {topic}</h1>\n      <div>\n        {messages.map((msg, index) => (\n          <p key={index}>{msg.text}</p>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Type a message...\" \n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatConversation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}