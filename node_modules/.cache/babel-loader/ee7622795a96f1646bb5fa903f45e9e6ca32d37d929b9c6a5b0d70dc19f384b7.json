{"ast":null,"code":"var _jsxFileName = \"/home/chemelil/chat-buddys-1/src/ChatConversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './ChatConversation.css'; // Importing the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatConversation() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  useEffect(() => {\n    // Fetch conversation data from db.json\n    fetch('/db.json').then(response => response.json()).then(data => {\n      setMessages(data.conversations[id] ? data.conversations[id][topic] : []);\n    });\n\n    // Fetch buddy's questions\n    fetch('/db.json').then(response => response.json()).then(data => {\n      if (data.buddies[id]) {\n        setQuestions(data.buddies[id].questions || []);\n      }\n    });\n  }, [id, topic]);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Add user's message\n    const newMessage = {\n      text: input\n    };\n    setMessages([...messages, newMessage]);\n\n    // Generate response from local data\n    const response = getAIResponse(input, topic);\n    if (response) {\n      setMessages(prevMessages => [...prevMessages, newMessage, {\n        text: response\n      }]);\n    }\n\n    // Display the next question\n    if (questionIndex < questions.length) {\n      setMessages(prevMessages => [...prevMessages, {\n        text: questions[questionIndex]\n      }]);\n      setQuestionIndex(questionIndex + 1);\n    }\n    setInput('');\n  };\n  const getAIResponse = (userInput, topic) => {\n    // Dummy response based on the topic\n    // You can add more sophisticated responses based on user input\n    const responses = {\n      political: [\"Did you know that the United Nations was founded in 1945?\", \"Did you know that democracy originated in ancient Greece?\", \"Did you know that the United States has a two-party system?\", \"Did you know that the European Union is a political and economic union?\", \"Did you know that the Cold War was a period of geopolitical tension between the US and USSR?\"],\n      emotional: [\"Did you know that expressing gratitude can increase happiness?\", \"Did you know that laughter triggers the release of endorphins?\", \"Did you know that music can influence your emotions?\", \"Did you know that talking to friends can reduce stress?\", \"Did you know that physical touch can lower blood pressure?\"],\n      scientific: [\"Did you know that water makes up about 71% of the Earth's surface?\", \"Did you know that the speed of light is approximately 299,792 kilometers per second?\", \"Did you know that humans share 60% of their DNA with bananas?\", \"Did you know that the universe is estimated to be 13.8 billion years old?\", \"Did you know that honey never spoils?\"]\n    };\n\n    // Select a random fact for the current topic\n    const facts = responses[topic] || [];\n    return facts[Math.floor(Math.random() * facts.length)];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Conversation on \", topic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${index % 2 === 0 ? 'user' : 'buddy'}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatConversation, \"DaKmEyAVHsiaidvSQALLdKDSxlg=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChatConversation;\nexport default ChatConversation;\nvar _c;\n$RefreshReg$(_c, \"ChatConversation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","jsxDEV","_jsxDEV","ChatConversation","_s","id","location","queryParams","URLSearchParams","search","topic","get","messages","setMessages","input","setInput","questions","setQuestions","questionIndex","setQuestionIndex","fetch","then","response","json","data","conversations","buddies","handleSubmit","e","preventDefault","newMessage","text","getAIResponse","prevMessages","length","userInput","responses","political","emotional","scientific","facts","Math","floor","random","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/chemelil/chat-buddys-1/src/ChatConversation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './ChatConversation.css';  // Importing the CSS file\n\nfunction ChatConversation() {\n  const { id } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const topic = queryParams.get('topic');\n  \n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [questionIndex, setQuestionIndex] = useState(0);\n\n  useEffect(() => {\n    // Fetch conversation data from db.json\n    fetch('/db.json')\n      .then(response => response.json())\n      .then(data => {\n        setMessages(data.conversations[id] ? data.conversations[id][topic] : []);\n      });\n\n    // Fetch buddy's questions\n    fetch('/db.json')\n      .then(response => response.json())\n      .then(data => {\n        if (data.buddies[id]) {\n          setQuestions(data.buddies[id].questions || []);\n        }\n      });\n  }, [id, topic]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Add user's message\n    const newMessage = { text: input };\n    setMessages([...messages, newMessage]);\n\n    // Generate response from local data\n    const response = getAIResponse(input, topic);\n    if (response) {\n      setMessages(prevMessages => [...prevMessages, newMessage, { text: response }]);\n    }\n\n    // Display the next question\n    if (questionIndex < questions.length) {\n      setMessages(prevMessages => [...prevMessages, { text: questions[questionIndex] }]);\n      setQuestionIndex(questionIndex + 1);\n    }\n\n    setInput('');\n  };\n\n  const getAIResponse = (userInput, topic) => {\n    // Dummy response based on the topic\n    // You can add more sophisticated responses based on user input\n    const responses = {\n      political: [\n        \"Did you know that the United Nations was founded in 1945?\",\n        \"Did you know that democracy originated in ancient Greece?\",\n        \"Did you know that the United States has a two-party system?\",\n        \"Did you know that the European Union is a political and economic union?\",\n        \"Did you know that the Cold War was a period of geopolitical tension between the US and USSR?\"\n      ],\n      emotional: [\n        \"Did you know that expressing gratitude can increase happiness?\",\n        \"Did you know that laughter triggers the release of endorphins?\",\n        \"Did you know that music can influence your emotions?\",\n        \"Did you know that talking to friends can reduce stress?\",\n        \"Did you know that physical touch can lower blood pressure?\"\n      ],\n      scientific: [\n        \"Did you know that water makes up about 71% of the Earth's surface?\",\n        \"Did you know that the speed of light is approximately 299,792 kilometers per second?\",\n        \"Did you know that humans share 60% of their DNA with bananas?\",\n        \"Did you know that the universe is estimated to be 13.8 billion years old?\",\n        \"Did you know that honey never spoils?\"\n      ]\n    };\n\n    // Select a random fact for the current topic\n    const facts = responses[topic] || [];\n    return facts[Math.floor(Math.random() * facts.length)];\n  };\n\n  return (\n    <div>\n      <h1>Conversation on {topic}</h1>\n      <div className=\"chat-container\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${index % 2 === 0 ? 'user' : 'buddy'}`}>\n            <p>{msg.text}</p>\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Type a message...\" \n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatConversation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}